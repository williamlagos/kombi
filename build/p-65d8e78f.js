var e;!function(e){e.NULL="NULL",e.OPEN="OPEN",e.CLOSE="CLOSE",e.ERROR="ERROR",e.SET_TOKEN="SET_TOKEN",e.REVOKE_TOKEN="REVOKE_TOKEN",e.SKIP_INTRO="SKIP_INTRO",e.SKIP_TOUR="SKIP_TOUR",e.OPEN_REGISTER="OPEN_REGISTER",e.CLOSE_REGISTER="CLOSE_REGISTER",e.REGISTER_ORDER="REGISTER_ORDER",e.SELECT_ORDER="SELECT_ORDER",e.SHOW_ORDER="SHOW_ORDER",e.PLACE_ORDER="PLACE_ORDER",e.MY_ORDERS="MY_ORDERS",e.ORDER_BIDS="ORDER_BIDS",e.ORDER_MERCHANT="ORDER_MERCHANT",e.MERCHANT_ORDERS="MERCHANT_ORDERS",e.START_ORDER="START_ORDER",e.CANCEL_ORDER="CANCEL_ORDER",e.FINISH_ORDER="FINISH_ORDER",e.RATE_ORDER="RATE_ORDER",e.OPEN_PROFILE="OPEN_PROFILE",e.UPDATE_PROFILE="UPDATE_PROFILE"}(e||(e={}));var r=Object.prototype.hasOwnProperty,t=function(){for(var e=[],r=0;r<256;++r)e.push("%"+((r<16?"0":"")+r.toString(16)).toUpperCase());return e}(),i=function(e,r){for(var t=r&&r.plainObjects?Object.create(null):{},i=0;i<e.length;++i)void 0!==e[i]&&(t[i]=e[i]);return t},s={arrayToObject:i,assign:function(e,r){return Object.keys(r).reduce((function(e,t){return e[t]=r[t],e}),e)},compact:function(e){for(var r=[{obj:{o:e},prop:"o"}],t=[],i=0;i<r.length;++i)for(var s=r[i],o=s.obj[s.prop],n=Object.keys(o),a=0;a<n.length;++a){var d=n[a],c=o[d];"object"==typeof c&&null!==c&&-1===t.indexOf(c)&&(r.push({obj:o,prop:d}),t.push(c))}return function(e){for(var r;e.length;){var t=e.pop();if(r=t.obj[t.prop],Array.isArray(r)){for(var i=[],s=0;s<r.length;++s)void 0!==r[s]&&i.push(r[s]);t.obj[t.prop]=i}}return r}(r)},decode:function(e){try{return decodeURIComponent(e.replace(/\+/g," "))}catch(r){return e}},encode:function(e){if(0===e.length)return e;for(var r="string"==typeof e?e:String(e),i="",s=0;s<r.length;++s){var o=r.charCodeAt(s);45===o||46===o||95===o||126===o||o>=48&&o<=57||o>=65&&o<=90||o>=97&&o<=122?i+=r.charAt(s):o<128?i+=t[o]:o<2048?i+=t[192|o>>6]+t[128|63&o]:o<55296||o>=57344?i+=t[224|o>>12]+t[128|o>>6&63]+t[128|63&o]:(o=65536+((1023&o)<<10|1023&r.charCodeAt(s+=1)),i+=t[240|o>>18]+t[128|o>>12&63]+t[128|o>>6&63]+t[128|63&o])}return i},isBuffer:function(e){return null!=e&&!!(e.constructor&&e.constructor.isBuffer&&e.constructor.isBuffer(e))},isRegExp:function(e){return"[object RegExp]"===Object.prototype.toString.call(e)},merge:function e(t,s,o){if(!s)return t;if("object"!=typeof s){if(Array.isArray(t))t.push(s);else{if("object"!=typeof t)return[t,s];(o.plainObjects||o.allowPrototypes||!r.call(Object.prototype,s))&&(t[s]=!0)}return t}if("object"!=typeof t)return[t].concat(s);var n=t;return Array.isArray(t)&&!Array.isArray(s)&&(n=i(t,o)),Array.isArray(t)&&Array.isArray(s)?(s.forEach((function(i,s){r.call(t,s)?t[s]&&"object"==typeof t[s]?t[s]=e(t[s],i,o):t.push(i):t[s]=i})),t):Object.keys(s).reduce((function(t,i){var n=s[i];return t[i]=r.call(t,i)?e(t[i],n,o):n,t}),n)}},o=String.prototype.replace,n=/%20/g,a={default:"RFC3986",formatters:{RFC1738:function(e){return o.call(e,n,"+")},RFC3986:function(e){return e}},RFC1738:"RFC1738",RFC3986:"RFC3986"},d={brackets:function(e){return e+"[]"},indices:function(e,r){return e+"["+r+"]"},repeat:function(e){return e}},c=Date.prototype.toISOString,u={delimiter:"&",encode:!0,encoder:s.encode,encodeValuesOnly:!1,serializeDate:function(e){return c.call(e)},skipNulls:!1,strictNullHandling:!1},m=function e(r,t,i,o,n,a,d,c,m,v,p,g){var E=r;if("function"==typeof d)E=d(t,E);else if(E instanceof Date)E=v(E);else if(null===E){if(o)return a&&!g?a(t,u.encoder):t;E=""}if("string"==typeof E||"number"==typeof E||"boolean"==typeof E||s.isBuffer(E))return a?[p(g?t:a(t,u.encoder))+"="+p(a(E,u.encoder))]:[p(t)+"="+p(String(E))];var l,O=[];if(void 0===E)return O;if(Array.isArray(d))l=d;else{var f=Object.keys(E);l=c?f.sort(c):f}for(var P=0;P<l.length;++P){var b=l[P];n&&null===E[b]||(O=Array.isArray(E)?O.concat(e(E[b],i(t,b),i,o,n,a,d,c,m,v,p,g)):O.concat(e(E[b],t+(m?"."+b:"["+b+"]"),i,o,n,a,d,c,m,v,p,g)))}return O},v=function(e,r){var t=e,i=r?s.assign({},r):{};if(null!=i.encoder&&"function"!=typeof i.encoder)throw new TypeError("Encoder has to be a function.");var o=void 0===i.delimiter?u.delimiter:i.delimiter,n="boolean"==typeof i.strictNullHandling?i.strictNullHandling:u.strictNullHandling,c="boolean"==typeof i.skipNulls?i.skipNulls:u.skipNulls,v="boolean"==typeof i.encode?i.encode:u.encode,p="function"==typeof i.encoder?i.encoder:u.encoder,g="function"==typeof i.sort?i.sort:null,E=void 0!==i.allowDots&&i.allowDots,l="function"==typeof i.serializeDate?i.serializeDate:u.serializeDate,O="boolean"==typeof i.encodeValuesOnly?i.encodeValuesOnly:u.encodeValuesOnly;if(void 0===i.format)i.format=a.default;else if(!Object.prototype.hasOwnProperty.call(a.formatters,i.format))throw new TypeError("Unknown format option provided.");var f,P,b=a.formatters[i.format];"function"==typeof i.filter?t=(P=i.filter)("",t):Array.isArray(i.filter)&&(f=P=i.filter);var h=[];if("object"!=typeof t||null===t)return"";var w=d[i.arrayFormat in d?i.arrayFormat:"indices"in i?i.indices?"indices":"repeat":"indices"];f||(f=Object.keys(t)),g&&f.sort(g);for(var M=0;M<f.length;++M){var q=f[M];c&&null===t[q]||(h=h.concat(m(t[q],q,w,n,c,v?p:null,P,g,E,l,b,O)))}var j=h.join(o);return j.length>0?(!0===i.addQueryPrefix?"?":"")+j:""};class p{static getDomain(){return p.backendDomain}static setDomain(e){p.backendDomain=e}static request(e,r,t,i,s,o){e=e.toUpperCase();let n=r;return Object.keys(i).length>0&&(n=r+"?"+v(i)),o.method=e,o.headers={Accept:"application/json","Content-Type":"application/json","x-access-token":o.headers["x-access-token"]},"GET"!==e&&(t?o.body=JSON.stringify(t):s&&(o.body=v(s))),fetch(n,o)}static multipartRequest(e,r,t,i){const s=new FormData,o=t.files;for(let e=0;e<o.length;e++)s.append("files[]",o[e]);return fetch(r,{method:e,headers:{"x-access-token":i.headers["x-access-token"]},body:s})}static getUsersAsAdmin(e={}){const r=e.$domain?e.$domain:p.getDomain(),t=e.$config||{headers:{}},i={};return void 0!==e.xAccessToken&&(t.headers["x-access-token"]=e.xAccessToken),void 0===e.xAccessToken?Promise.reject(new Error("Missing required  parameter: xAccessToken")):(void 0!==e.role&&(i.role=e.role),void 0===e.role?Promise.reject(new Error("Missing required  parameter: role")):(void 0!==e.keyword&&(i.keyword=e.keyword),void 0===e.keyword?Promise.reject(new Error("Missing required  parameter: keyword")):(void 0!==e.page&&(i.page=e.page),void 0===e.page?Promise.reject(new Error("Missing required  parameter: page")):(void 0!==e.pageSize&&(i.pageSize=e.pageSize),e.$queryParameters&&Object.keys(e.$queryParameters).forEach((r=>{i[r]=e.$queryParameters[r]})),p.request("get",r+"/admin/users",{},i,{},t)))))}static deactivateUserAsAdmin(e={}){const r=e.$domain?e.$domain:p.getDomain(),t=e.$config||{headers:{}};let i="/admin/users/{id}";const s={};return void 0!==e.xAccessToken&&(t.headers["x-access-token"]=e.xAccessToken),void 0===e.xAccessToken?Promise.reject(new Error("Missing required  parameter: xAccessToken")):(i=i.replace("{id}",`${e.id}`),void 0===e.id?Promise.reject(new Error("Missing required  parameter: id")):(e.$queryParameters&&Object.keys(e.$queryParameters).forEach((r=>{s[r]=e.$queryParameters[r]})),p.request("post",r+i,{},s,{},t)))}static activateUserAsAdmin(e={}){const r=e.$domain?e.$domain:p.getDomain(),t=e.$config||{headers:{}};let i="/admin/users/{id}/activate";const s={};return void 0!==e.xAccessToken&&(t.headers["x-access-token"]=e.xAccessToken),void 0===e.xAccessToken?Promise.reject(new Error("Missing required  parameter: xAccessToken")):(i=i.replace("{id}",`${e.id}`),void 0===e.id?Promise.reject(new Error("Missing required  parameter: id")):(e.$queryParameters&&Object.keys(e.$queryParameters).forEach((r=>{s[r]=e.$queryParameters[r]})),p.request("post",r+i,{},s,{},t)))}static changeUserRole(e={}){const r=e.$domain?e.$domain:p.getDomain(),t=e.$config||{headers:{}};let i="/admin/users/{id}/role/{role}";const s={};return void 0!==e.xAccessToken&&(t.headers["x-access-token"]=e.xAccessToken),void 0===e.xAccessToken?Promise.reject(new Error("Missing required  parameter: xAccessToken")):(i=i.replace("{id}",`${e.id}`),void 0===e.id?Promise.reject(new Error("Missing required  parameter: id")):(i=i.replace("{role}",`${e.role}`),void 0===e.role?Promise.reject(new Error("Missing required  parameter: role")):(e.$queryParameters&&Object.keys(e.$queryParameters).forEach((r=>{s[r]=e.$queryParameters[r]})),p.request("post",r+i,{},s,{},t))))}static getChats(e={}){const r=e.$domain?e.$domain:p.getDomain(),t=e.$config||{headers:{}},i={};return void 0!==e.xAccessToken&&(t.headers["x-access-token"]=e.xAccessToken),void 0===e.xAccessToken?Promise.reject(new Error("Missing required  parameter: xAccessToken")):(e.$queryParameters&&Object.keys(e.$queryParameters).forEach((r=>{i[r]=e.$queryParameters[r]})),p.request("get",r+"/chat/chats",{},i,{},t))}static getChat(e={}){const r=e.$domain?e.$domain:p.getDomain(),t=e.$config||{headers:{}};let i="/chat/{chat}";const s={};return void 0!==e.xAccessToken&&(t.headers["x-access-token"]=e.xAccessToken),void 0===e.xAccessToken?Promise.reject(new Error("Missing required  parameter: xAccessToken")):(i=i.replace("{chat}",`${e.chat}`),void 0===e.chat?Promise.reject(new Error("Missing required  parameter: chat")):(e.$queryParameters&&Object.keys(e.$queryParameters).forEach((r=>{s[r]=e.$queryParameters[r]})),p.request("get",r+i,{},s,{},t)))}static addLead(e={}){const r=e.$domain?e.$domain:p.getDomain(),t=e.$config||{headers:{}};let i={};const s={};return void 0!==e.lead&&(i=e.lead),e.$queryParameters&&Object.keys(e.$queryParameters).forEach((r=>{s[r]=e.$queryParameters[r]})),p.request("post",r+"/lead",i,s,{},t)}static getLeads(e={}){const r=e.$domain?e.$domain:p.getDomain(),t=e.$config||{headers:{}},i={};return void 0!==e.xAccessToken&&(t.headers["x-access-token"]=e.xAccessToken),void 0===e.xAccessToken?Promise.reject(new Error("Missing required  parameter: xAccessToken")):(e.$queryParameters&&Object.keys(e.$queryParameters).forEach((r=>{i[r]=e.$queryParameters[r]})),p.request("get",r+"/lead",{},i,{},t))}static getLead(e={}){const r=e.$domain?e.$domain:p.getDomain(),t=e.$config||{headers:{}};let i="/lead/{id}";const s={};return void 0!==e.xAccessToken&&(t.headers["x-access-token"]=e.xAccessToken),void 0===e.xAccessToken?Promise.reject(new Error("Missing required  parameter: xAccessToken")):(i=i.replace("{id}",`${e.id}`),void 0===e.id?Promise.reject(new Error("Missing required  parameter: id")):(e.$queryParameters&&Object.keys(e.$queryParameters).forEach((r=>{s[r]=e.$queryParameters[r]})),p.request("get",r+i,{},s,{},t)))}static placeBid(e={}){const r=e.$domain?e.$domain:p.getDomain(),t=e.$config||{headers:{}};let i="/bid/{order}/place",s={};const o={};return void 0!==e.xAccessToken&&(t.headers["x-access-token"]=e.xAccessToken),void 0===e.xAccessToken?Promise.reject(new Error("Missing required  parameter: xAccessToken")):(void 0!==e.bid&&(s=e.bid),i=i.replace("{order}",`${e.order}`),void 0===e.order?Promise.reject(new Error("Missing required  parameter: order")):(e.$queryParameters&&Object.keys(e.$queryParameters).forEach((r=>{o[r]=e.$queryParameters[r]})),p.request("post",r+i,s,o,{},t)))}static placeFinalBid(e={}){const r=e.$domain?e.$domain:p.getDomain(),t=e.$config||{headers:{}};let i="/bid/{order}/final",s={};const o={};return void 0!==e.xAccessToken&&(t.headers["x-access-token"]=e.xAccessToken),void 0===e.xAccessToken?Promise.reject(new Error("Missing required  parameter: xAccessToken")):(void 0!==e.bid&&(s=e.bid),i=i.replace("{order}",`${e.order}`),void 0===e.order?Promise.reject(new Error("Missing required  parameter: order")):(e.$queryParameters&&Object.keys(e.$queryParameters).forEach((r=>{o[r]=e.$queryParameters[r]})),p.request("post",r+i,s,o,{},t)))}static getOrderBids(e={}){const r=e.$domain?e.$domain:p.getDomain(),t=e.$config||{headers:{}};let i="/bid/by-order/{order}";const s={};return void 0!==e.xAccessToken&&(t.headers["x-access-token"]=e.xAccessToken),void 0===e.xAccessToken?Promise.reject(new Error("Missing required  parameter: xAccessToken")):(i=i.replace("{order}",`${e.order}`),void 0===e.order?Promise.reject(new Error("Missing required  parameter: order")):(e.$queryParameters&&Object.keys(e.$queryParameters).forEach((r=>{s[r]=e.$queryParameters[r]})),p.request("get",r+i,{},s,{},t)))}static removeFavoriteMerchant(e={}){const r=e.$domain?e.$domain:p.getDomain(),t=e.$config||{headers:{}};let i="/customer/favorites/merchant/{merchant}";const s={};return void 0!==e.xAccessToken&&(t.headers["x-access-token"]=e.xAccessToken),void 0===e.xAccessToken?Promise.reject(new Error("Missing required  parameter: xAccessToken")):(i=i.replace("{merchant}",`${e.merchant}`),void 0===e.merchant?Promise.reject(new Error("Missing required  parameter: merchant")):(e.$queryParameters&&Object.keys(e.$queryParameters).forEach((r=>{s[r]=e.$queryParameters[r]})),p.request("post",r+i,{},s,{},t)))}static getFavoritesList(e={}){const r=e.$domain?e.$domain:p.getDomain(),t=e.$config||{headers:{}},i={};return void 0!==e.xAccessToken&&(t.headers["x-access-token"]=e.xAccessToken),void 0===e.xAccessToken?Promise.reject(new Error("Missing required  parameter: xAccessToken")):(e.$queryParameters&&Object.keys(e.$queryParameters).forEach((r=>{i[r]=e.$queryParameters[r]})),p.request("get",r+"/customer/favorites/merchants",{},i,{},t))}static getMerchantById(e={}){const r=e.$domain?e.$domain:p.getDomain(),t=e.$config||{headers:{}};let i="/merchant/{id}/details";const s={};return i=i.replace("{id}",`${e.id}`),void 0===e.id?Promise.reject(new Error("Missing required  parameter: id")):(e.$queryParameters&&Object.keys(e.$queryParameters).forEach((r=>{s[r]=e.$queryParameters[r]})),p.request("get",r+i,{},s,{},t))}static getMerchantByUsername(e={}){const r=e.$domain?e.$domain:p.getDomain(),t=e.$config||{headers:{}};let i="/merchant/by-username/{username}";const s={};return i=i.replace("{username}",`${e.username}`),void 0===e.username?Promise.reject(new Error("Missing required  parameter: username")):(e.$queryParameters&&Object.keys(e.$queryParameters).forEach((r=>{s[r]=e.$queryParameters[r]})),p.request("get",r+i,{},s,{},t))}static createMerchant(e={}){const r=e.$domain?e.$domain:p.getDomain(),t=e.$config||{headers:{}};let i={};const s={};return void 0!==e.xAccessToken&&(t.headers["x-access-token"]=e.xAccessToken),void 0===e.xAccessToken?Promise.reject(new Error("Missing required  parameter: xAccessToken")):(void 0!==e.user&&(i=e.user),e.$queryParameters&&Object.keys(e.$queryParameters).forEach((r=>{s[r]=e.$queryParameters[r]})),p.request("post",r+"/merchant/account/payment",i,s,{},t))}static getNearbyMerchants(e={}){const r=e.$domain?e.$domain:p.getDomain(),t=e.$config||{headers:{}},i={};return void 0!==e.latitude&&(i.latitude=e.latitude),void 0===e.latitude?Promise.reject(new Error("Missing required  parameter: latitude")):(void 0!==e.longitude&&(i.longitude=e.longitude),void 0===e.longitude?Promise.reject(new Error("Missing required  parameter: longitude")):(void 0!==e.radius&&(i.radius=e.radius),void 0!==e.keyword&&(i.keyword=e.keyword),e.$queryParameters&&Object.keys(e.$queryParameters).forEach((r=>{i[r]=e.$queryParameters[r]})),p.request("get",r+"/merchant/nearby",{},i,{},t)))}static getNearbyMerchantsByService(e={}){const r=e.$domain?e.$domain:p.getDomain(),t=e.$config||{headers:{}};let i="/merchant/nearby/{service}";const s={};return i=i.replace("{service}",`${e.service}`),void 0===e.service?Promise.reject(new Error("Missing required  parameter: service")):(void 0!==e.latitude&&(s.latitude=e.latitude),void 0===e.latitude?Promise.reject(new Error("Missing required  parameter: latitude")):(void 0!==e.longitude&&(s.longitude=e.longitude),void 0===e.longitude?Promise.reject(new Error("Missing required  parameter: longitude")):(void 0!==e.keyword&&(s.keyword=e.keyword),void 0!==e.radius&&(s.radius=e.radius),e.$queryParameters&&Object.keys(e.$queryParameters).forEach((r=>{s[r]=e.$queryParameters[r]})),p.request("get",r+i,{},s,{},t))))}static createOrder(e={}){const r=e.$domain?e.$domain:p.getDomain(),t=e.$config||{headers:{}};let i={};const s={};return void 0!==e.xAccessToken&&(t.headers["x-access-token"]=e.xAccessToken),void 0===e.xAccessToken?Promise.reject(new Error("Missing required  parameter: xAccessToken")):(void 0!==e.order&&(i=e.order),e.$queryParameters&&Object.keys(e.$queryParameters).forEach((r=>{s[r]=e.$queryParameters[r]})),p.request("post",r+"/order",i,s,{},t))}static getOrders(e={}){const r=e.$domain?e.$domain:p.getDomain(),t=e.$config||{headers:{}},i={};return void 0!==e.xAccessToken&&(t.headers["x-access-token"]=e.xAccessToken),void 0===e.xAccessToken?Promise.reject(new Error("Missing required  parameter: xAccessToken")):(void 0!==e.status&&(i.status=e.status),e.$queryParameters&&Object.keys(e.$queryParameters).forEach((r=>{i[r]=e.$queryParameters[r]})),p.request("get",r+"/order",{},i,{},t))}static getReadyOrders(e={}){const r=e.$domain?e.$domain:p.getDomain(),t=e.$config||{headers:{}},i={};return void 0!==e.xAccessToken&&(t.headers["x-access-token"]=e.xAccessToken),void 0===e.xAccessToken?Promise.reject(new Error("Missing required  parameter: xAccessToken")):(e.$queryParameters&&Object.keys(e.$queryParameters).forEach((r=>{i[r]=e.$queryParameters[r]})),p.request("get",r+"/order/ready",{},i,{},t))}static getOrdersByPeriod(e={}){const r=e.$domain?e.$domain:p.getDomain(),t=e.$config||{headers:{}},i={};return void 0!==e.xAccessToken&&(t.headers["x-access-token"]=e.xAccessToken),void 0===e.xAccessToken?Promise.reject(new Error("Missing required  parameter: xAccessToken")):(void 0!==e.status&&(i.status=e.status),void 0!==e.startDate&&(i.startDate=e.startDate),void 0!==e.endDate&&(i.endDate=e.endDate),e.$queryParameters&&Object.keys(e.$queryParameters).forEach((r=>{i[r]=e.$queryParameters[r]})),p.request("get",r+"/order/between-dates",{},i,{},t))}static getOrder(e={}){const r=e.$domain?e.$domain:p.getDomain(),t=e.$config||{headers:{}};let i="/order/{id}";const s={};return void 0!==e.xAccessToken&&(t.headers["x-access-token"]=e.xAccessToken),void 0===e.xAccessToken?Promise.reject(new Error("Missing required  parameter: xAccessToken")):(i=i.replace("{id}",`${e.id}`),void 0===e.id?Promise.reject(new Error("Missing required  parameter: id")):(e.$queryParameters&&Object.keys(e.$queryParameters).forEach((r=>{s[r]=e.$queryParameters[r]})),p.request("get",r+i,{},s,{},t)))}static acceptOrder(e={}){const r=e.$domain?e.$domain:p.getDomain(),t=e.$config||{headers:{}};let i="/order/{id}/accept";const s={};return void 0!==e.xAccessToken&&(t.headers["x-access-token"]=e.xAccessToken),void 0===e.xAccessToken?Promise.reject(new Error("Missing required  parameter: xAccessToken")):(i=i.replace("{id}",`${e.id}`),void 0===e.id?Promise.reject(new Error("Missing required  parameter: id")):(e.$queryParameters&&Object.keys(e.$queryParameters).forEach((r=>{s[r]=e.$queryParameters[r]})),p.request("post",r+i,{},s,{},t)))}static cancelOrder(e={}){const r=e.$domain?e.$domain:p.getDomain(),t=e.$config||{headers:{}};let i="/order/{id}/cancel";const s={};return void 0!==e.xAccessToken&&(t.headers["x-access-token"]=e.xAccessToken),void 0===e.xAccessToken?Promise.reject(new Error("Missing required  parameter: xAccessToken")):(i=i.replace("{id}",`${e.id}`),void 0===e.id?Promise.reject(new Error("Missing required  parameter: id")):(e.$queryParameters&&Object.keys(e.$queryParameters).forEach((r=>{s[r]=e.$queryParameters[r]})),p.request("get",r+i,{},s,{},t)))}static finishOrder(e={}){const r=e.$domain?e.$domain:p.getDomain(),t=e.$config||{headers:{}};let i="/order/{id}/finish";const s={};return void 0!==e.xAccessToken&&(t.headers["x-access-token"]=e.xAccessToken),void 0===e.xAccessToken?Promise.reject(new Error("Missing required  parameter: xAccessToken")):(i=i.replace("{id}",`${e.id}`),void 0===e.id?Promise.reject(new Error("Missing required  parameter: id")):(e.$queryParameters&&Object.keys(e.$queryParameters).forEach((r=>{s[r]=e.$queryParameters[r]})),p.request("post",r+i,{},s,{},t)))}static rateOrder(e={}){const r=e.$domain?e.$domain:p.getDomain(),t=e.$config||{headers:{}};let i="/order/{id}/rate/{rate}";const s={};return void 0!==e.xAccessToken&&(t.headers["x-access-token"]=e.xAccessToken),void 0===e.xAccessToken?Promise.reject(new Error("Missing required  parameter: xAccessToken")):(i=i.replace("{id}",`${e.id}`),void 0===e.id?Promise.reject(new Error("Missing required  parameter: id")):(i=i.replace("{rate}",`${e.rate}`),void 0===e.rate?Promise.reject(new Error("Missing required  parameter: rate")):(e.$queryParameters&&Object.keys(e.$queryParameters).forEach((r=>{s[r]=e.$queryParameters[r]})),p.request("post",r+i,{},s,{},t))))}static getReceivingModes(e={}){const r=e.$domain?e.$domain:p.getDomain(),t=e.$config||{headers:{}},i={};return e.$queryParameters&&Object.keys(e.$queryParameters).forEach((r=>{i[r]=e.$queryParameters[r]})),p.request("get",r+"/order/receiving-modes",{},i,{},t)}static getPaymentModes(e={}){const r=e.$domain?e.$domain:p.getDomain(),t=e.$config||{headers:{}},i={};return e.$queryParameters&&Object.keys(e.$queryParameters).forEach((r=>{i[r]=e.$queryParameters[r]})),p.request("get",r+"/order/payment-modes/list",{},i,{},t)}static getOrdersNearby(e={}){const r=e.$domain?e.$domain:p.getDomain(),t=e.$config||{headers:{}},i={};return void 0!==e.latitude&&(i.latitude=e.latitude),void 0===e.latitude?Promise.reject(new Error("Missing required  parameter: latitude")):(void 0!==e.longitude&&(i.longitude=e.longitude),void 0===e.longitude?Promise.reject(new Error("Missing required  parameter: longitude")):(void 0!==e.radius&&(i.radius=e.radius),void 0!==e.keyword&&(i.keyword=e.keyword),void 0!==e.page&&(i.page=e.page),void 0===e.page?Promise.reject(new Error("Missing required  parameter: page")):(void 0!==e.pageSize&&(i.pageSize=e.pageSize),e.$queryParameters&&Object.keys(e.$queryParameters).forEach((r=>{i[r]=e.$queryParameters[r]})),p.request("get",r+"/order/by-location/nearby",{},i,{},t))))}static setOrderMerchant(e={}){const r=e.$domain?e.$domain:p.getDomain(),t=e.$config||{headers:{}};let i="/order/{id}/merchant/{merchant}";const s={};return void 0!==e.xAccessToken&&(t.headers["x-access-token"]=e.xAccessToken),void 0===e.xAccessToken?Promise.reject(new Error("Missing required  parameter: xAccessToken")):(i=i.replace("{id}",`${e.id}`),void 0===e.id?Promise.reject(new Error("Missing required  parameter: id")):(i=i.replace("{merchant}",`${e.merchant}`),void 0===e.merchant?Promise.reject(new Error("Missing required  parameter: merchant")):(e.$queryParameters&&Object.keys(e.$queryParameters).forEach((r=>{s[r]=e.$queryParameters[r]})),p.request("post",r+i,{},s,{},t))))}static startOrder(e={}){const r=e.$domain?e.$domain:p.getDomain(),t=e.$config||{headers:{}};let i="/order/{id}/start";const s={};return void 0!==e.xAccessToken&&(t.headers["x-access-token"]=e.xAccessToken),void 0===e.xAccessToken?Promise.reject(new Error("Missing required  parameter: xAccessToken")):(i=i.replace("{id}",`${e.id}`),void 0===e.id?Promise.reject(new Error("Missing required  parameter: id")):(e.$queryParameters&&Object.keys(e.$queryParameters).forEach((r=>{s[r]=e.$queryParameters[r]})),p.request("post",r+i,{},s,{},t)))}static sendNotification(e={}){const r=e.$domain?e.$domain:p.getDomain(),t=e.$config||{headers:{}},i={};return void 0!==e.xAccessToken&&(t.headers["x-access-token"]=e.xAccessToken),void 0===e.xAccessToken?Promise.reject(new Error("Missing required  parameter: xAccessToken")):(e.$queryParameters&&Object.keys(e.$queryParameters).forEach((r=>{i[r]=e.$queryParameters[r]})),p.request("post",r+"/notification/send",{},i,{},t))}static getNotifications(e={}){const r=e.$domain?e.$domain:p.getDomain(),t=e.$config||{headers:{}},i={};return void 0!==e.xAccessToken&&(t.headers["x-access-token"]=e.xAccessToken),void 0===e.xAccessToken?Promise.reject(new Error("Missing required  parameter: xAccessToken")):(e.$queryParameters&&Object.keys(e.$queryParameters).forEach((r=>{i[r]=e.$queryParameters[r]})),p.request("get",r+"/notification",{},i,{},t))}static getNotification(e={}){const r=e.$domain?e.$domain:p.getDomain(),t=e.$config||{headers:{}};let i="/notification/{id}";const s={};return void 0!==e.xAccessToken&&(t.headers["x-access-token"]=e.xAccessToken),void 0===e.xAccessToken?Promise.reject(new Error("Missing required  parameter: xAccessToken")):(i=i.replace("{id}",`${e.id}`),void 0===e.id?Promise.reject(new Error("Missing required  parameter: id")):(e.$queryParameters&&Object.keys(e.$queryParameters).forEach((r=>{s[r]=e.$queryParameters[r]})),p.request("get",r+i,{},s,{},t)))}static accessWithFacebook(e={}){const r=e.$domain?e.$domain:p.getDomain(),t=e.$config||{headers:{}},i={};return void 0!==e.accessToken&&(i.access_token=e.accessToken),void 0===e.accessToken?Promise.reject(new Error("Missing required  parameter: accessToken")):(e.$queryParameters&&Object.keys(e.$queryParameters).forEach((r=>{i[r]=e.$queryParameters[r]})),p.request("post",r+"/oauth/access/facebook",{},i,{},t))}static addPicture(e={}){const r=e.$domain?e.$domain:p.getDomain(),t=e.$config||{headers:{}},i={};return void 0!==e.xAccessToken&&(t.headers["x-access-token"]=e.xAccessToken),void 0===e.xAccessToken?Promise.reject(new Error("Missing required  parameter: xAccessToken")):(void 0!==e.files&&(i.files=e.files),e.$queryParameters&&Object.keys(e.$queryParameters).forEach((()=>{})),p.multipartRequest("POST",r+"/picture/save",i,t))}static getPicture(e={}){const r=e.$domain?e.$domain:p.getDomain(),t=e.$config||{headers:{}};let i="/picture/{id}";const s={};return void 0!==e.xAccessToken&&(t.headers["x-access-token"]=e.xAccessToken),void 0===e.xAccessToken?Promise.reject(new Error("Missing required  parameter: xAccessToken")):(i=i.replace("{id}",`${e.id}`),void 0===e.id?Promise.reject(new Error("Missing required  parameter: id")):(e.$queryParameters&&Object.keys(e.$queryParameters).forEach((r=>{s[r]=e.$queryParameters[r]})),p.request("get",r+i,{},s,{},t)))}static getPictures(e={}){const r=e.$domain?e.$domain:p.getDomain(),t=e.$config||{headers:{}};let i={};return void 0!==e.xAccessToken&&(t.headers["x-access-token"]=e.xAccessToken),void 0===e.xAccessToken?Promise.reject(new Error("Missing required  parameter: xAccessToken")):void 0===e.ids?Promise.reject(new Error("Missing required  parameter: id")):(i={ids:String(e.ids)},p.request("get",r+"/picture/multiple",{},i,{},t))}static getLatest(e={}){const r=e.$domain?e.$domain:p.getDomain(),t=e.$config||{headers:{}};let i="/picture/{itemId}";const s={};return void 0!==e.xAccessToken&&(t.headers["x-access-token"]=e.xAccessToken),void 0===e.xAccessToken?Promise.reject(new Error("Missing required  parameter: xAccessToken")):(i=i.replace("{itemId}",`${e.itemId}`),void 0===e.itemId?Promise.reject(new Error("Missing required  parameter: itemId")):(e.$queryParameters&&Object.keys(e.$queryParameters).forEach((r=>{s[r]=e.$queryParameters[r]})),p.request("get",r+i,{},s,{},t)))}static removePicture(e={}){const r=e.$domain?e.$domain:p.getDomain(),t=e.$config||{headers:{}};let i="/picture/remove/{id}";const s={};return void 0!==e.xAccessToken&&(t.headers["x-access-token"]=e.xAccessToken),void 0===e.xAccessToken?Promise.reject(new Error("Missing required  parameter: xAccessToken")):(i=i.replace("{id}",`${e.id}`),void 0===e.id?Promise.reject(new Error("Missing required  parameter: id")):(e.$queryParameters&&Object.keys(e.$queryParameters).forEach((r=>{s[r]=e.$queryParameters[r]})),p.request("post",r+i,{},s,{},t)))}static createUser(e={}){const r=e.$domain?e.$domain:p.getDomain(),t=e.$config||{headers:{}};let i={};const s={};return void 0!==e.user&&(i=e.user),e.$queryParameters&&Object.keys(e.$queryParameters).forEach((r=>{s[r]=e.$queryParameters[r]})),p.request("post",r+"/user/create",i,s,{},t)}static isUniqueUsername(e={}){const r=e.$domain?e.$domain:p.getDomain(),t=e.$config||{headers:{}};let i="/user/username/exists/{username}";const s={};return i=i.replace("{username}",`${e.username}`),void 0===e.username?Promise.reject(new Error("Missing required  parameter: username")):(e.$queryParameters&&Object.keys(e.$queryParameters).forEach((r=>{s[r]=e.$queryParameters[r]})),p.request("get",r+i,{},s,{},t))}static getUserProfile(e={}){const r=e.$domain?e.$domain:p.getDomain(),t=e.$config||{headers:{}},i={};return void 0!==e.xAccessToken&&(t.headers["x-access-token"]=e.xAccessToken),void 0===e.xAccessToken?Promise.reject(new Error("Missing required  parameter: xAccessToken")):(e.$queryParameters&&Object.keys(e.$queryParameters).forEach((r=>{i[r]=e.$queryParameters[r]})),p.request("get",r+"/user/profile",{},i,{},t))}static authenticateUser(e={}){const r=e.$domain?e.$domain:p.getDomain(),t=e.$config||{headers:{}};let i={};const s={};return void 0!==e.user&&(i=e.user),e.$queryParameters&&Object.keys(e.$queryParameters).forEach((r=>{s[r]=e.$queryParameters[r]})),p.request("post",r+"/user/authenticate",i,s,{},t)}static updateUser(e={}){const r=e.$domain?e.$domain:p.getDomain(),t=e.$config||{headers:{}};let i={};const s={};return void 0!==e.xAccessToken&&(t.headers["x-access-token"]=e.xAccessToken),void 0===e.xAccessToken?Promise.reject(new Error("Missing required  parameter: xAccessToken")):(void 0!==e.user&&(i=e.user),e.$queryParameters&&Object.keys(e.$queryParameters).forEach((r=>{s[r]=e.$queryParameters[r]})),p.request("post",r+"/user/update",i,s,{},t))}static recoverPassword(e={}){const r=e.$domain?e.$domain:p.getDomain(),t=e.$config||{headers:{}};let i="/user/password/recover/{email}";const s={};return i=i.replace("{email}",`${e.email}`),void 0===e.email?Promise.reject(new Error("Missing required  parameter: email")):(e.$queryParameters&&Object.keys(e.$queryParameters).forEach((r=>{s[r]=e.$queryParameters[r]})),p.request("post",r+i,{},s,{},t))}static updatePassword(e={}){const r=e.$domain?e.$domain:p.getDomain(),t=e.$config||{headers:{}};let i={};const s={};return void 0!==e.xAccessToken&&(t.headers["x-access-token"]=e.xAccessToken),void 0===e.xAccessToken?Promise.reject(new Error("Missing required  parameter: xAccessToken")):(void 0!==e.user&&(i=e.user),e.$queryParameters&&Object.keys(e.$queryParameters).forEach((r=>{s[r]=e.$queryParameters[r]})),p.request("post",r+"/user/password/update",i,s,{},t))}static addSkip(e={}){const r=e.$domain?e.$domain:p.getDomain(),t=e.$config||{headers:{}};let i="/user/skips/{skip}";const s={};return void 0!==e.xAccessToken&&(t.headers["x-access-token"]=e.xAccessToken),void 0===e.xAccessToken?Promise.reject(new Error("Missing required  parameter: xAccessToken")):(i=i.replace("{skip}",`${e.skip}`),void 0===e.skip?Promise.reject(new Error("Missing required  parameter: skip")):(e.$queryParameters&&Object.keys(e.$queryParameters).forEach((r=>{s[r]=e.$queryParameters[r]})),p.request("post",r+i,{},s,{},t)))}}p.backendDomain="";export{p as B,e as T}